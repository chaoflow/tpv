* Bits and Pieces
** tpv
*** event
starapi sends emails, if a user is approved. How can we solve this
more generic?

An event could have a name and be defined by a method call where the
parameters match regexes. An email is sent if an event "user-approved"
is triggered.

*** acl
How can we solve ACLs more generically?

*** generic aspects
**** think in dictionaries
**** what can be done by combining two or more parallel trees
***** cache
****** check cache
****** return if cached
****** get value = _next(...)
****** write val into cache
****** return value
***** fallback
****** check _next and return if successful
****** check fallback if not successful
***** merge
***** call first, hand second as argument
***** ...

*** look through starapi
come up with ideas/code that generalizes the concepts being used in
there

** tpv.cli
metachao.classtree.node and plumbum.cli are used to created a tree of
commands and subcommands. A command is a class, a subcommand is a
child class. Instantiation is handled by plumbum.cli.

tpv.nix is using tpv.cli already. see there and plumbum.cli
documentation for what you can do.

*** tab completion for bash and zsh (zsh priority)
**** static
From plumbum.cli command tree we want tab completion for commands,
subcommands and their options.

Contact plumbum.cli author whether he has thoughts on how to achieve this.

**** dynamic
For dynamic lookups, I would imagine the shell to call a cli command
with a special parameter, e.g.:

mrsd clone /github/chaoflow/tpv<TAB>
--> mrsd clone --auto-complete github/chaoflow/tpv

In this case we would have a top-level command (mrsd) with a sublevel
command (clone) and a data model with a Github connector class as
direct child of the root classtree.Node. Traversing in, connects to
github in effect listing all repos starting with tpv.

** tpv.http
Provide a restful API to interact with tpv trees and connect restful
APIs as tpv subtrees.

A restful tpv application knows 4 commands: GET, POST, PUT, DELETE

First these are implemented as tpv.cli commands, then http request are
translated for the tpv.cli parser:

*** tpv.cli restful application
4 toplevel commands, check tpv.nix, for how commands are created and
nested

The __call__ methods contents is what
tpv.http.aspects.map_http_methods_to_model is currently doing.

All parameters that can be given via url query string shall be handled
via the cli parser, see below.
**** GET
**** POST
**** PUT
**** DELETE

*** map http request to cli
GET /foo/bar?foo&a=1&abc=2
--> GET --foo -a 1 --abc 2 /foo/bar

**** make this work for everything starapi needs


*** make GET /foo?help work
take message generated by plumbum.cli and render in pre tag. Don't
worry about -a and --abc being written there instead of ?a&abc

*** "mount" a remote tpv.http service as a subtree into a local tpv tree
